var axios = require('axios');
var config = require('config');
var Rollbar = require('rollbar');
var _ = require('lodash');

var apiUrl = config.get('App.apiUrl');
var ROLLBAR_SERVER_TOKEN = config.get('Rollbar.serverToken');
var SLACK_API_TOKEN = config.get('Slack.apiToken');
var SLACK_CHANNEL_NAME = config.get('Slack.channelName');

process.env.NODE_ENV = process.env.NODE_ENV || 'development';

Rollbar.init(ROLLBAR_SERVER_TOKEN, {
  environment: process.env.NODE_ENV,
  endpoint: 'https://api.rollbar.com/api/1/',
  enabled: process.env.NODE_ENV === 'production'
});

function sendMessageToSlack (message) {
  axios
    .post('https://slack.com/api/chat.postMessage', {}, {
      params: {
        token: SLACK_API_TOKEN,
        channel: SLACK_CHANNEL_NAME,
        text: message,
        username: 'Tabletop Selector',
        icon_emoji: ':game_die:'
      }
    })
    .then(function (response) {
      console.log(response);
    })
    .catch(function (response) {
      Rollbar.handleError(response);
    });
}

function sendNoVotesMessage () {
  sendMessageToSlack('No votes provided today, you are on your own.');
}

function sendTopVoteMessage (voteCount, title) {
  sendMessageToSlack('Today\'s chosen game is _' + title + '_ with ' +
               voteCount + ' votes.');
}

(function () {
  axios
    .get(apiUrl + '/v1/votes/', {
      params: { date: 'today'}
    })
    .then(function (response) {
      var votes = response.data;
      if (!votes.length) {
        return sendNoVotesMessage();
      }
      var counted = _.countBy(votes, function (vote) {
        return vote.game.title;
      });

      var maxVal = 0;
      var maxTitle = '';
      for (var key in counted) {
        if (counted[key] > maxVal) {
          maxVal = counted[key];
          maxTitle = key;
        }
      }

      return sendTopVoteMessage(maxVal, maxTitle);
    })
    .catch(function (response) {
      Rollbar.handleError(response);
    });
})();

